name: Generate documentation

on:
  push:
    branches:
      - main
    tags:
      - 'v*.*.*'

  pull_request:

jobs:
  build-doc:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: "3.x"

    - name: Install pip packages
      working-directory: docs
      run: |
        pip install pip --upgrade
        pip install -r requirements.txt

    - name: format version path
      working-directory: docs
      run: |
          tags=$(git tag | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | sort -V | awk '$0 > "v0.1.0"')
          tags=$(echo "$tags" | head -n -1)
          index_file="index.rst"
          lines=$(cat $index_file)
          start_line=$(grep -n "Documentation Version" $index_file | cut -d: -f1 | head -n 1)
          if [ -n "$start_line" ]; then
              lines=$(head -n $(($start_line - 1)) $index_file)
          fi
          rst_content="Documentation Version\n"
          rst_content+="====================\n\n"
          for version in $tags; do
              rst_content+="    * \`$version <https://ionutmuthi.github.io/docVersionTest/$version/index.html>\`__\n"
          done
          lines+="$rst_content"
          echo -e "$lines" > $index_file

    - name: Build doc
      working-directory: docs
      run: |
        make html SPHINXOPTS='-W --keep-going'

    - name: Store the generated doc
      uses: actions/upload-artifact@v4
      with:
        name: html
        path: docs/_build/html

  deploy-doc:
    runs-on: ubuntu-latest
    needs: build-doc
    if: startsWith(github.ref, 'refs/tags/')

    steps:
    - run: |
        git config --global user.name "${{ github.event.head_commit.committer.name }}"
        git config --global user.email "${{ github.event.head_commit.committer.email }}"

    - uses: actions/checkout@v4
    - name: Create gh-pages branch
      run: >
        git ls-remote --exit-code --heads origin refs/heads/gh-pages ||
        (
          git reset --hard ;
          git clean -fdx ;
          git checkout --orphan gh-pages ;
          git reset --hard;
          git commit -m "empty" --allow-empty ;
          git push origin gh-pages:gh-pages
        )

    - uses: actions/checkout@v4
      with:
        ref: 'gh-pages'

    - name: Empty gh-pages
      run: |
        git fetch --tags --force
        git tag -l > versions.txt
        cat versions.txt
        ref=${{ github.ref }}
        tag=${ref##*/}
        echo $tag
        mkdir $tag
        rsync -av --remove-source-files --exclude-from=versions.txt --exclude=versions.txt --exclude=$tag ./* $tag
        rm versions.txt
        find . -mindepth 1 -type d -empty -delete

    - name: ls -la before download
      run: ls -la

    - uses: actions/download-artifact@v4
      with:
        name: html

    - name: ls -la after download
      run: ls -la

    - name: Patch doc build
      run: |
        rm -r _sources
        touch .nojekyll

    - name: Commit gh-pages
      run: |
        git add . >> /dev/null
        git status
        git diff
        git commit -m "deploy: ${GITHUB_SHA}" --allow-empty

    - name: Push to gh-pages
      run: |
        git push origin gh-pages:gh-pages